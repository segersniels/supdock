name: Release
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Cache target
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache
        uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-
      - run: yarn install
      - run: yarn check:typescript
      - run: yarn lint
      - run: yarn test
      - run: yarn compile
      - name: Build and see if executable works
        run: |
          yarn build:ci
          ./bin/supdock-linux --help
      - name: Persist artifact
        uses: actions/upload-artifact@v2
        with:
          name: built_dirs
          path: |
            bin
            dist

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.event.head_commit.message, ':bookmark:') || startsWith(github.event.head_commit.message, ':green_heart:')
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Grab persisted artifact
        uses: actions/download-artifact@v2
        with:
          name: built_dirs
      - name: Configure registry
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
      - name: Get current package.json version
        id: current_version
        uses: martinbeentjes/npm-get-version-action@master
      - name: Release beta
        if: contains(steps.current_version.outputs.current-version, 'beta')
        run: yarn publish:beta
      - name: Release NPM
        if: "!contains(steps.current_version.outputs.current-version, 'beta')"
        run: yarn publish:master
      - name: Create Github Release
        if: "!contains(steps.current_version.outputs.current-version, 'beta')"
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.current_version.outputs.current-version }}
          draft: false
          prerelease: false
      - name: Upload Assets to Release with a wildcard
        uses: csexton/release-asset-action@v2
        with:
          pattern: 'bin/*'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-url: ${{ steps.create_release.outputs.upload_url }}
